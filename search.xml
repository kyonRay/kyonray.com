<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hyperledger Indy分析报告]]></title>
    <url>%2F2019%2F07%2F16%2FHyperledger-Indy-Research%2F</url>
    <content type="text"><![CDATA[Hyperledger Indy提供了一种基于区块链或其他分布式账本的分布式数字身份（DID）方案，这种方案中包含了各种工具、库和可重用工具，以便于这些数字身份可在多个管理域、应用程序以及其他任何数据孤岛上互通。 一、Indy架构综述从横向看，Indy主要分为项目分布、生态系统架构、数据模型(DID、DID Document、Verified Credentials)；从纵向看，Indy主要分为业务层(Business Layer)、应用层(Applications Layer)和技术层(Technology Layer)。 总体架构如下图所示： 1. 业务层 业务层主要使用以下几个应用层提供的功能服务：凭证发行（Issue）、凭证存储（Local Store）、数据请求（Request）、凭证披露（Present）、凭证验证（Verify）、凭证撤销（Revocate）用户注册登录等。 2. 应用层应用层主要功能：提供DID服务、提供凭证服务、提供特定业务服务。 应用层由Indy底下 Indy-Agent 和 Indy-SDK 两个项目支撑。Indy-SDK项目提供钱包功能组件（Wallet Component）支撑数据存储与开发，使用技术层Agent API提供的服务；Indy-Agent项目提供代理功能组件（Agent Component）支撑业务开发。 3. 技术层 技术层也可再分为Cloud Agent层和Ledger层。 Cloud Agent层由Indy-Agent项目、Indy-SDK项目和 DIF Universal-Resolver 项目作支撑，主要功能是提供对Edge Agent的服务，直接与Ledger层进行交互，将请求结果返回到应用层。Indy-SDK项目调用Ledger层的API，实现直接与区块链进行交互；Indy-Agent项目调用Indy-SDK的钱包API，提供代理功能组件，并提供凭证注册组件（Credential Registry Node Component）实现凭证的注册；DIF Universal-Resolver项目提供DID的解析器组件，直接与Ledger层交互，解析出DID。 Ledger层由 Indy-Node 和 Indy-Plenum 两个项目实现，主要功能是实现Indy区块链的功能。Indy-Plenum 项目主要实现的是Plenum BFT共识协议，是Fabric for Identity的定制版，是整个Indy项目的核心部分；Indy-Node是在Indy-Plenum区块链之上的服务器，直接与区块链层进行交互，实现节点功能。 4. 数据模型DID、DID Document都是按照W3C所定的数据标准建立的，主要关系如下图所示： 二、Hyperledger Indy工作流以一个Alice从Faber大学毕业找工作的场景简单介绍Hyperledger Indy的工作流。（链接） Step 1: 政府生成凭证模板(Schema) 政府颁发Transcript Schema和Job-Certificate Schema，并将其记录到分布式账本中。每个人都可以访问这些模板。 Step 2： Faber大学和Acme公司生成他们自己的凭证定义(Credential definition) Faber大学和Acme公司根据政府发布的模板创建自己的凭证的定义，并将定义上传到链上。 Alice从Faber大学获得成绩单(凭证)，然后再申请工作时想Acme公司提供证书作为教育资格证明。 Step 3： Alice从Faber大学获得成绩单凭证 具体子步骤如下： Alice与Faber大学建立连接； Faber 大学生成Credential offer给Alice； Alice从分布式账本中查询Faber大学对成绩单的定义，生成Credential request发送给Faber大学； Faber大学生成一个Credential给Alice，这个Credential内含了足够的proof证明凭证的有效性； Alice收到Credential，保存到自己的钱包（wallet）。 Step 4： Acme公司请求Alice的教育证明 具体子步骤如下： Acme公司与Alice建立连接； Acme生成proof request发送给Alice，这个请求中包含了应该符合的条件； Alice收到了proof request，基于Credential生成对应的proof，发送给Acme公司； Acme公司收到了proof，并验证其有效性； Acme公司确认了proof。 之后Alice获得了Acme的工作凭证（job-certificate），并将该凭证发送给Thrift银行以证明聘期，便可申请贷款。（Alice使用Faber大学给的教育凭证完成了KYC过程） Step5： Alice获得了Acme公司给的工作证明 具体子步骤如下： Acme公司发送Credential Offer给Alice； Alice从分布式账本获取Acme Credential的定义，生成Credential request发送给Acme公司； Acme公司生成Credential发送给Alice，该凭证中包含了足够多的证明以证明Alice的聘期； Alice收到Credential并保存到钱包（wallet）里。 Step 6 ： Thrift银行请求Alice的聘期证明，以及Alice 的KYC 具体子步骤如下： Thrift银行与Alice建立连接； Thrift银行生成两个proof request，发送给Alice；在这里的例子中，银行要求工资大于2000，工作经验大于1年，以及KYC流程； Alice收到两个proof request，基于Faber大学的凭证以及Acme公司的凭证收成两个proof，发送给Thrift银行； Thrift银行收到了证明，并确认其有效性； Thrift银行确认了Alice的proof。 三、关键技术点Indy整个项目的文件分布如下： 分布式账本 Indy-Node：实现在基于Plenum BFT的分布式账本功能与节点功能，； Indy-Plenum：实现基于Plenum BFT共识机制，定义wallet基类； 客户端工具 Indy-SDK：由两个主要组件构成：libindy(底层)，libVCX(实现层)； Indy-Agent：项目实现Agent Client，有以下几种功能方向的App： Edge Agent App； Edge Agent Web App； Edge Agent Lightweight App； Cloud Agent Node； Ledger Node； Credential Registry Agent Mode； 通用组件： Indy-Crypto：承用了Hyperledger URSA，作为Indy的密码学代码库； Indy-HIPE(Hyperledger Indy Project Enhancements)：实现了Indy的功能增强组件。 接下来将按照项目文件的主体部分进行逐层解析。 1. Indy-Plenum 从内容上看，Plenum项目主要实现了基于RBFT改进的共识机制以及共识操作方法，定义了四种链分别存储整个Indy的配置、事务等信息，定义了DID的wallet以及DID签名验证方法。项目主要分为以下几个部分： 1.1 plenum包plenum包实现了基于 RBFT 改进的Plenum BFT共识算法，在Commit阶段手机n-of-l个的BLS签名，在共识Order阶段，对多个BLS签名进行聚合。（注：BLS签名算法在Indy-Crypto中详细说明） Plenum共识改进部分大致在以下三点体现： RBFT每个请求都会发起三段commit，Plenum是一堆请求才发起三段commit； Plenum在PRE-PREPARE和PREPARE阶段都保存了默克尔树根与state树根； 三段commit都是用了BLS多签名聚合方法，客户端不需要其他节点响应。 可以通过这个链接看到Plenum共识协议流程图：Plenum Diagrams 此外，plenum包定义了DID的钱包（wallet）基类，以及DID对消息签名、签名验证的方法。 钱包类主要数据结构如下： name -&gt; str：id名； ids -&gt; Dict[Identifier, IdData]：DID到IdData的映射，一个DID一个IdData； idsToSigners -&gt; Dict[Identifier, Signer]：DID到Signer的映射，一个DID一个Signer； aliasesToIds -&gt; Dict[Alias, Identifier]：(别名)Alias到DID的映射，一个DID对应多个Alias。 钱包类主要方法： Encrypt/Decrypt：均使用 libsodium密码库的python封装进行加解密； sign/verify：签名和签名验证方法都是基于libsodium的sign方法进行的，使用signKey签名，使用veryKey+DID进行验证； DID Create： 指定或产生Seed，32byte； 根据Ed25519算法产生公私钥对 MSK,MPK； 再将产生的私钥作为种子Seed，使用Ed25519，生成新的公钥VerkeyRaw，新的签名私钥signKey； 将verKeyRaw的前16字节进行base58解码，成为DID，后16字节为verKey。 当signKey、verKey丢失时，将可以使用MSK再次重新生成。 Wallet storage：使用 jsonpickle 进行JSON序列化和反序列化，保存在本地。 1.2 ledger包ledger包定义了整个区块链结构、创世块、Merkle tree结构以及实现了Merkle tree快速验证方法。 1.3 crypto包crypto包是对Indy-Crypto项目部分功能的封装，主要实现了BLS多重签名。（注：BLS多重签名将在Indy-Crypto项目中详细说明） 1.4 存储组件 在Ledger组件中默认使用RocksDB和LevelDB进行KV存储，且使用Merkle Patricia Trie 存储账本状态。每个节点均维护四个账本： Audit Ledger：主要负责与其他三个Ledger同步，为失败节点恢复数据，并对账本正确性进行审计； Pool Ledger：主要维护池中节点的信息（Membership）； Domain Ledger：为主要账本，记录交易； Config Ledger：是Pool节点的配置账本。 1.5 底层性能目前暂未有数据文件表明Plenum的性能指标，还需进一步实际测试。 TODO: 测试Plenum性能指标。 2. Indy-Node Indy-Node项目主要实现了基于Plenum BFT共识协议的分布式账本，以及节点的功能。主要包括：处理读写请求、定义交易类型以及交易分类存储。 接下来将按照项目文件的主体部分进行逐层解析。 2.1 indy-nodeIndy-node包主要实现基于Plenum BFT共识协议的分布式账本、对交易读写请求的处理以及提供了对特定交易的支持，各类交易都会记录到不同种类的Ledger中： 存储到Domain Ledger的交易： NYM：NYM交易主要实现创建新DID、对已存在的DID用户进行角色变更（注：角色变更涉及到权限管理，可查看交易权限管理部分的详情）DID Document就是对NYM交易进行溯源，即可得到一份完整的DID Document； ATTRIB：主要实现对已有NYM添加一个属性； SCHEMA：增加一个声明模板，模板主要包含：属性名、模板名、模板版本号； CLAIM_DEF：对一个声明进行定义，由Issuer创建并公开，若要对一个声明进行升级，需要用新的Issuer DID进行新的声明，主要包含：声明公钥、声明撤销公钥、签名类型（只支持CL签名算法）； 存储到Pool Ledger的交易： NODE：在池中添加一个节点，或更新一个池中的节点； 存储到Config Ledger的交易： POOL_UPGRADE：由Trustee发起，升级Pool中的配置，也可更新池中特定的节点设置； NODE_UPGRADE：记录节点升级后的节点状态，由升级的节点发出； POOL_CONFIG：更改池中的配置。 2.2 indy-commonindy-common包主要定义了角色权限，以及一些对Indy-Plenum项目方法的封装。 2.3 dev-setup/evironmentdev-setup包和evironment包提供了节点部署方案，可以在本机部署（目前只支持Ubuntu、macOS），也可以部署在容器Docker上，可以部署在云端。 2.4 交易权限管理Indy中节点可分为common user，trust anchor，steward，trustee 四类，每种特殊交易都有特定的角色权限才可以进行。具体可看链接。 3. Indy-SDK Indy-SDK作为Plenum分布式账本的SDK，主要是实现了代理端软件Agent可以与分布式账本、DID钱包以及DID doc进行互通，实现凭证Credential，为不同编程语言封装了主要功能。 3.1 libindy如上图所示，libindy包主要面向应用提供了基础的区块构建方法，实现了对钱包Wallet、凭证Credential以及DID的操作，且提供不同编程语言调用的封装。并基于SDK提供了命令行工具CLI。 CredentialIndy Credential工作流图如下图所示： Issuer生成凭证模板(Create Credential Schema): Issuer创建某个凭证Schema，并将Schema交易发送给Ledger； Issuer生成凭证定义(Create Credential Definition): Issuer想Ledger发送获取某个凭证Schema请求，得到Schema后创建凭证定义，存储公私钥对和正确性证明在本地，将该种凭证定义发送给Ledger； Issuer生成凭证撤销表(Create Revocation Registry): Issuer生成凭证撤销表，并将撤销表入口、撤销表定义发送到Ledger； Prover生成主密钥(Create Master secret): Prover生成主密钥，并保存在本地； Issuer生成凭证提议(Create Credential Offer): Issuer想要发行凭证给Prover，向wallet请求，wallet获取对应的正确性证明，再讲cred_offer消息发送给Prover； Prover请求，Issuer发行凭证(Request and Issue Credential): Prover收到cred_offer消息，向Ledger发送GET_CRED_DEF请求，填写好相应的表单之后生成凭证请求发送给Issuer；Issuer正式发行凭证给Prover，并向Ledger更新凭证撤销表入口；Prover获得凭证后向Ledger验证凭证有效，保存在本地； Prover展示凭证(Show Credential on UI): Prover向wallet请求，wallet返回对应Credential； Prover向Verifier展示凭证(Present Credential to 3rd Party(proof request)): Verifier发起证明请求，Prover给出相应的凭证，并向Ledger核实该凭证的撤消状态，确认之后便将凭证发送给Verifier；Verifier拿到凭证向Ledger核实； Issuer撤销凭证(Revoke Credential)： Issuer获取密钥和撤销注册表，并向Ledger同步撤销注册表的入口。 (注：Credential相关密码学部分将会在Indy-Crypto部分详细说明) Command Line InterfaceCLI组件设计如下图所示： WalletWallet组件设计如下图所示： 在Secrets API，允许调用密钥生成、DID生成等需要访问加密实体的方法；在Non-secrets API只允许访问存取wallet中特定的DID数据。Wallet API提供方法将钱包记录在本地SQL数据库中存取。 Decentrailized Key Management相关文档并不多，只介绍了当密钥丢失时的措施： 离线物理恢复密钥； 需要trustee级别的用户进行恢复； 考虑到安全性，恢复往往需要与密钥轮换和撤销相结合。 此外，在官方文档中提到了使用Shamir Secret Sharing Scheme是通过分布式密钥碎片存储，在密钥丢失时，只需要将碎片重新整合起来即可恢复。（注：Shamir Secret Sharing Scheme会在Indy-Crypto中简单介绍） 3.2 libvcxlibvcx包实现了一种Agent-2-Agent的通信协议，用于credentials的交换。主要还是使用JSON进行通信，通信时使用SSL证书进行加密通信。（注：Credential的选择性披露将在Indy-Crypto中详细说明） 4. Indy-AgentIndy-Agent项目是一个基于Indy-SDK实现的代理客户端的合集，目前已有多种语言的客户端实现。 5. Indy-CryptoIndy-Crypto项目是Hyperledger URSA密码库的一部分，主要在Indy项目使用的密码学方法有： BLS多签算法 ， CL群签名算法 。其中，Indy使用BLS多签算法，减少Plenum共识算法的轮训，减少签名长度；Indy使用CL群签名算法对Credential进行选择性披露，实现零知识证明。 5.1 BLS multi-sign1). 准备阶段有两个哈希方程 $H_0: \{ 0, 1 \} ^ \rightarrow \Bbb{G}_2$ ， $H_1: \{ 0, 1 \}^ \rightarrow \Bbb{Z}_q$ $ H_0$是将元素哈希到 $\Bbb{G}_2$ 群，$H_1$是将元素哈希到q阶整数群。 2). 参数生成$Pg(k): par \leftarrow (q, \Bbb{G}_1,\Bbb{G}_2, \Bbb{G}_t,e,g_1,g_2) \leftarrow G(k)$ 生成一个双线性配对群，其中q是阶数，$ \Bbb{G}_1, \Bbb{G}_2$ 是q阶群，$e : \Bbb{G}_t \leftarrow \Bbb{G}_1 × \Bbb{G}_2$ 是一种映射关系，$g_1,g_2$ 分别是 $ \Bbb{G}_1, \Bbb{G}_2$ 的生成子。 3). 密钥生成$Kg(par) : sk \xleftarrow{random} \Z_q ; pk \leftarrow g_2^{sk}$ 在整数群众随机抽取得出私钥 $sk$ ，公钥 $pk$ 由私钥计算得出。 4). 公钥聚合$KAg({pk_1,…,pk_n}) : apk \leftarrow \prod_{i=1}^n{pk_i^{H_1(pk_i, \{ pk_1,…,pk_n \} )}}$ 将所有的用户公钥都聚合起来，最终形成一个聚合公钥 $apk$ 。 5). 签名$Sign(par, \{ pk_1,…,pk_n \} ,sk,m) : s_i \leftarrow H_0(m)^{a_i \cdot sk_i} , where\ a_i \leftarrow H_1(pk_i, \{ pk_1,…,pk_n \} )$ 每个用户 $i$ 对消息 $m$ 用私钥签名，得出签名 $s_i$ $\sigma \leftarrow \prod_{j=1}^n s_j$ 再将签名发给一个节点，节点进行聚合计算，生成聚合签名 $\sigma$ 6). 验证$Vf(par,apk,m, \sigma ) : \ e( \sigma , g_2^{-1}) \cdot e(H_0(m),apk) = 1_{ \Bbb{G}_t}$ 将聚合公钥和聚合签名输入，进行两次双线性配对，若上面的式子成立，则说明验证成功；否则失败。 5.2 Camenisch-Lysyanskaya Sign1). 准备阶段有一个哈希方程 $Hash: \{ 0, 1 \} ^* \rightarrow \Bbb{Z}_q$ $Hash$ 函数是将元素哈希到q阶整数群。 2). 参数生成$Pg(k): par \leftarrow (q,\Bbb{G}, \Bbb{G}_t,e,g) \leftarrow G(k)$ 生成一个双线性配对群，其中q是阶数，$ \Bbb{G}$ 是q阶群，$e : \Bbb{G}_t \leftarrow \Bbb{G} × \Bbb{G}$ 是一种映射关系，$g$ 是 $\Bbb{G}$ 的生成子。 3). 密钥生成$Kg(par) : sk_1,sk_2 \xleftarrow{random} \Z_q ; pk_1 \leftarrow g^{sk_1}; \ pk_2 \leftarrow g^{sk_2}$ 在整数群众随机抽取得出子私钥 $sk_1,sk_2$ ，子公钥 $pk_1,pk_2$ 由私钥计算得出。 最终输出私钥： $SK=(sk_1,sk_2)$ ， 公钥： $PK=(par,pk_1,pk_2)$ 。 4). 签名输入 $message$ ，生成消息 $M \leftarrow Hash(message)$ ，在群 $ \Bbb{G} $ 随机选取随机数 $A \in \Bbb{G}$ , 计算 $B \leftarrow A^{sk_2}, \ C \leftarrow A^{sk_1}B^{sk_1 \cdot M}$ ，最终输出对消息 $M$ 的签名：$ \sigma \leftarrow (A,B,C)$ 。 5). 验证输入对消息 $M$ 的签名 $ \sigma \leftarrow (A,B,C)$ ，使用公钥 $PK$ 验证，若 $e(A,pk_2)=e(B,g)$ 且 $e(C,g)=e(A,pk_1) \cdot e(B,pk_1)^M$ 则验证成功。 5.3 Anonymous credentials with type-3 revocation这是Indy项目中Credential（凭证）的整体方案，包括凭证颁发、凭证存储、凭证选择性披露与验证、凭证撤销。 在整个Credential的方案中有三种角色：issuer（凭证发行人）、holder（凭证持有人）、verifier（验证者）。这种方案是基于Camenisch-Lysyanskaya Sign方案改进的，可实现选择性披露、“一次性”凭证的功能。 详情可看这个PDF文档 （建议由密码学功底的人看） 5.4 Shamir Secret Sharing SchemeTODO 四、Hyperledger AriesHyperledger Aries 是今年5月Hyperledger宣布开源的项目，目前该项目还处于初始阶段，Aires 的产品包括: 用于创建和签名区块链事务的区块链接口层（称为解析器） 安全存储（安全存储技术）用于构建区块链客户机加密信息和其他信息的加密钱包 一种加密的消息传递系统，用于使用多种传输协议在客户端之间进行账外交互 使用 Ursa 中的 ZKP 原语实现支持 ZKP 的 W3C 可验证凭证 一种去中心化密钥管理系统（DKMS）规范 一种基于安全消息传递功能构建的高级协议和类API用例的机制 我个人认为这是Hyperledger Indy项目的一种扩展延伸，实现功能点几乎一样； 但是，Indy是专注于为身份认证而建立的特定区块链，Aries是不适用区块链的项目，项目组期望能在Aries成熟之后融入Indy项目。Hyperledger之后会将Indy项目中与区块链无关的功能迁移到Aries项目，Induy专注于区块链功能。 五、落地案例主要落地应用是在加拿大British Columbia省的 Verfiable Organizations Network(VON)，该项目已开源(链接)，目的在于帮助商人建立可信的持续的电子身份验证，从而加速申请政府机构的许可证和执照。 该项目已经在2019年1月推出上线，减少了新供应商或客户进行尽职调查的时间。下一步目标是扩展应用程序，鼓励更多的司法管辖区域使用。 六、推广模式目前Indy的推广模式相关文章/报道较少(可能也是我菜，找不到/不会找 _(:3」∠)_ ) 以投资者的角度分析了Sovrin项目 (链接) 采访Sovrin主创报道文章，主要讲述了Sovrin是什么，要解决什么问题，怎么解决的，展望未来(链接) 七、Q&amp;AQ：Hyperledger Indy是否支持智能合约？ A：Indy专注于数字身份管理，Indy不是为了支持任何资产交换而开发的，而是为了解决与我们当前数字环境的问题。该项目旨在取代我们用来通过分散机制验证用户数字身份的主流机制，例如用户名 - 密码组合，这种机制更安全可靠。由于其独特的使用案例，Indy无法支持任何智能合约。 Q：Authentication是如何进行的？授权的粒度？ Indy对DID、Credential以及节点的授权都有不同，详情可见链接。 Q：是否支持多个区块链平台？ A：目前Indy项目的底层是Plenum BFT，共识并没有模块化，底层耦合度较高，所以不支持。 Q：用户和机构如何介入？ A：详情可见链接1、链接2 Q：区块节点部署方式？ A：目前Indy节点支持本地部署(macOS，Ubuntu)，容器部署(docker)以及云端部署，都有一键部署工具可用。 参考链接/文献 Hyperledger Indy/Sovrin/DID Comprehensive Architecture Reference Model (INDY ARM) hyperledger/indy-agent hyperledger/indy-sdk decentralized-identity/universal-resolver hyperledger/indy-node hyperledger/indy-plenum Decentralized Identifiers (DIDs) v0.13 hyperledger/indy-crypto hyperledger/indy-hipe Aublin, P.-L &amp; Mokhtar, Sonia &amp; Quéma, Vivien. (2013). RBFT: Redundant byzantine fault tolerance. Proceedings - International Conference on Distributed Computing Systems. 297-306. 10.1109/ICDCS.2013.53. Plenum Diagrams Libsodium document jsonpickle: Python library for serializing any arbitrary object graph into JSON. Merkling in Ethereum Current implemented rules in auth_map Dan Boneh, Manu Drijvers, and Gregory Neven. Compact multi-signatures for62 smaller blockchains. Cryptology ePrint Archive, 2018. Camenisch J., Lysyanskaya A. (2003) A Signature Scheme with Efficient Protocols. In: Cimato S., Persiano G., Galdi C. (eds) Security in Communication Networks. SCN 2002. Lecture Notes in Computer Science, vol 2576. Springer, Berlin, Heidelberg Hyperledger Aries is infrastructure for blockchain-rooted, peer-to-peer interactions Exploring Hyperledger Indy through indy-dev Example Verifiable Organizations Network: Global digital trust for organizations Verifiable Organizations Network Reducing Government Red Tape: British Columbia Creates New Business Identity Model with Hyperledger Indy Does Hyperledger Indy support any kind of smart contracts? Add Node to Existing Pool Create a Network and Start Nodes Camenisch, J., Kohlweiss, M., Soriente, C.: An Accumulator Based on Bilinear Maps and Efficient Revocation for Anonymous Credentials. In Jarecki, S., Tsudik, G., eds.: Public KeyCryptography. Volume 5443 of Lecture Notes in Computer Science., Springer (2009) 481–500 Anonymous credentials with type-3 revocation. Dmitry Khovratovich, Michael Lodder. 9 February 2018, version 0.4 TokenGazer深度研究：Sovrin，技术落地可期，但推广难度较高 Use case spotlight: The Government of British Columbia uses the Sovrin Network to take strides towards a fully digital economy]]></content>
  </entry>
  <entry>
    <title><![CDATA[Sovrin White Paper Reading]]></title>
    <url>%2F2019%2F07%2F12%2FSovrin-White-Paper-Reading%2F</url>
    <content type="text"><![CDATA[问题描述在物质世界，我们使用物理凭证来证明我们的身份（identity）我们可以有驾照来证明我们的驾驶许可、可以有学位证书来证明我们的学历、可以有技能证书来证明我们的能力；但是在互联网上，却没有等同的解决方案来向互联网端的验证者证明自己的能力、资质、拥有权。 这些问题的本质是因为，在整个互联网中没有凭证以及凭证发行验证的标准。The World Wide Web Consortium(W3C)在2017年4月对凭证进行了标准化。但如何对凭证发行方的电子签名的验证进行标准化，还存在着疑问。现有解决方案是采用PKI证书密钥体系，但是这种方案需要多次证书交互，每次进行验证都需要与证书颁发中心进行交互验证证书，且存在中心作恶的风险。 Sovrin给出的解决方案在区块链上部署decentralized PKI(DPKI)体系结构，每个实体可以进行ID标识，生成Decentralized Identifier(DID)，这样每个实体都以同一标准生成一个身份标识，所有人都可以发行电子签名的凭证，所有人都可以验证这些凭证。 Sovrin愿景全球化的分布式身份识别与可验证凭证方案。这种方案可以用在所有类型的区块链，并且广泛使用程度能超过DNS。 Sovrin隐私保护方案 Pseudonymity by default 成对且唯一的DID和公钥； Private agents by default 任何隐私数据都不会上链； Selective disclosure by default 使用零知识证明的方法，对有选择地披露声明信息，保证隐私安全。 参考文献 Sovrin-Protocol-and-Token-White-Paper1 Decentralized Public Key Infrastructure: A White Paper from Rebooting the Web of Trust W3C: Decentralized Identifiers (DIDs) v0.13]]></content>
      <categories>
        <category>区块链项目</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>Identity</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Facebook Libra区块链白皮书研读]]></title>
    <url>%2F2019%2F06%2F24%2FLibra-whitepaper-study%2F</url>
    <content type="text"><![CDATA[简述Facebook这次发起的新区块链虚拟货币在技术层面上并未看到有大的革新，与现有的虚拟货币区别不大。从现在的白皮书以及技术文档上所指，最大的特点是币的价值和真实资产储备相挂钩，相对于比特币，波动性较小，价值更平稳，这更像是一种有政府背书的数字货币。 Libra使用了新的编程语言来编写智能合约，设计了基于拜占庭容错的共识算法LibraBFT，如何能承受住全球这么打的用户量，如何，这些问题在技术论文上也没有披露太多信息。 应用背景 现有区块链缺乏可扩展性，加密货币具有波动性，到目前为止，这些因素导致现有的加密货币在保值和交换媒介方面均表现欠佳，因而阻碍了它们在市场上的广泛使用。 一些项目还试图破坏现有体系并绕过监管，而不是在合规和监管方面进行创新，以提高反洗钱举措的效力。 携手金融部门(包括各个行业的监管机构和专家)进行合作和创新，是确保为这一新体系建立可持续、安全和可信的支撑框架的唯一途径。 应用愿景 Libra 的使命是建立一套简单的、无国界的货币和为数十亿人服务的金融基础设施。 Libra 完全由真实资产储备提供支持。对于每个新创建的Libra 加密货币，在 Libra 储备中都有相对应价值的银行存款和短期政府债券，以此建立人们对其内在价值的信任，并以此维持加密货币的价值稳定。 Libra协会成员包括分布在不同地理区域的各种企业、非营利组织、多边组织和学术机构。包含PayPal、Visa等支付业巨头，eBay、Uber、Booking等交易平台。 任何消费者、开发者或公司都可以使用 Libra 网络、在这个网络上构建产品，并通过他们的服务实现增值作用。 技术特色 目标是扩展到数十亿账户，要求具有极高的交易吞吐量和低延迟； 设计和使用全新的Move编程语言，用于智能合约编程； 采用拜占庭容错共识机制，设计使用LibraBFT； 参考链接[1]. Libra中文白皮书[2]. Libra技术论文[3]. Libra开发文档]]></content>
      <categories>
        <category>区块链项目</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链实验课简易教程]]></title>
    <url>%2F2019%2F05%2F29%2Fblockchain-easy-test%2F</url>
    <content type="text"><![CDATA[这是一个使用 Python3 + flask 写的简单平台，主要目的是体验区块链的场景。 项目库：https://github.com/dvf/blockchain 一、实验目标 熟悉区块数据结构，了解哈希算法； 简单了解哈希碰撞(挖矿)的流程，并对发起新交易流程有所了解； 熟悉区块链的不可篡改性、顺序性，以及区块链分叉时的场景。 二、实验基础本实验涉及到以下必要知识点： 掌握Python语言知识点，熟悉Python程序构建方法，了解flask web框架； 熟练使用 *nix系统，熟悉命令行操作（Windows也可）； 掌握HTTP协议，熟悉状态返回值的含义； 会使用普通IDE，会使用Postman等工具测试API。 三、实验步骤1. 实验环境依赖 Git python version &gt;= 3.6 flask == 0.12.2 requests == 2.18.4 Python下载 Git下载 2. 实验环境搭建PS：在这里的命令行操作主要面向 *nix 系统。 12345678910111213141516# 在适当的目录下拉取库$ git clone https://github.com/dvf/blockchain.git# 检查python版本号 &gt;= 3.6python --version# 下载pipenv$ pip install pipenv# 在当前代码根目录下$ pipenv install# 启动服务器 (默认端口是5000) -p 设定端口号$ pipenv run python blockchain.py# 起多个服务 PS：注意端口冲突$ pipenv run python blockchain.py -p 5001 另：可使用Docker标准环境搭建，可供不希望更改python环境的用户使用。 (注意 这是另外一种实验环境搭建方法，上面做完可不做这一步) Docker桌面工具下载地址：Docker Desktop for Mac and Windows 命令行下载(面向Ubuntu) ：Get Docker CE for Ubuntu 1234567891011# 在适当的目录下拉取库$ git clone https://github.com/dvf/blockchain.git# 确保docker服务已经在运行，构建镜像$ docker build -t blockchain .# 起容器，-p 端口映射，外部通过端口80，访问容器内5000端口的服务$ docker run --rm -p 80:5000 blockchain# 起多个容器服务 注意端口$ docker run --rm -p 81:5000 blockchain 3. 与区块链进行交互实验很简单，使用API工具对服务器发起HTTP请求，也可以使用古老的cURL来替代Postman工具访问API。 Postman Download API总共5中方法： /chain：返回当前区块链表 /mine：进行挖矿，生产一个区块 /transactions/new：产生一笔新交易 /nodes/register：节点注册，将多个节点绑定到一起 /nodes/resolve：区块链同步 1). /chain 方法测试使用Postman 发送GET方法HTTP请求 12# cURL方式访问$ curl -X GET "http://localhost:5000/chain" 可以看到区块链的结构如下： 123456789101112&#123; "chain": [ &#123; "index": 1, "previous_hash": "1", "proof": 100, "timestamp": 1558874710.4303942, "transactions": [] &#125; ], "length": 1&#125; 创世块的index为1，transactions内不包含交易。 2). /mine 方法测试使用Postman 发送GET方法HTTP请求 12# cURL方式访问$ curl -X GET "http://localhost:5000/mine" 可以看到服务器将交易池的所有交易打包产生了一个新的区块index2，并计算了前一块的哈希值。 若交易池内没有交易，系统默认产生sender为0的交易，方便演示 :) 这时，再调用/chain方法，查看返回的记录，有什么变化？测试previous_has是否就是前一块的哈希。 3). /transactions/new方法测试使用Postman 发送POST方法HTTP请求，这里需要使用JSON格式写入body。 如上图所示，alice向bob发出数量为1的交易。 123456# cURL方式访问$ curl -X POST -H "Content-Type: application/json" -d '&#123; "sender": "alice", "recipient": "bob", "amount": 1&#125;' "http://localhost:5000/transactions/new" 这笔交易将会发到交易池，等待矿工将它打包到区块里。 这时，再调用/mine方法，查看返回的记录，有什么变化？ 4). /nodes/register方法测试在这里，需要两个以上服务端，即两个以上终端进行操作。 注意：这里分为两种情况，使用pipenv配置的环境，使用Docker配置的环境，请按已有的环境登记节点。 使用pipenv配置的环境12# 在代码根目录内，重新起一个服务，注意端口要设置成不一样$ pipenv run python blockchain.py -p 5001 使用Postman 发送POST方法的HTTP请求，这里需要填入JSON格式写入body。 注意：这里填入的node是你新起的服务端口，可以有一个，可以有多个 1234# cURL方式访问$ curl -X POST -H "Content-Type: application/json" -d '&#123; "nodes": ["http://0.0.0.0:5001"]&#125;' "http://localhost:5000/nodes/register" 在 http://0.0.0.0:5001 的服务节点也要用/nodes/register方法把端口5000的服务节点加进去，数据就可以互通。 使用Docker配置的环境12# 重起一个新的节点$ docker run --rm -p 81:5000 blockchain 在登记节点时，需要知道本机的本地ip(local IP)，在这里假设本地IP是196.128.0.1 12345# cURL方式访问# 在80端口登记81端口的服务$ curl -X POST -H "Content-Type: application/json" -d '&#123; "nodes": ["http://196.128.0.1:81"]&#125;' "http://localhost:80/nodes/register" 同样的，在81端口也需要登记80端口的服务。 5). /nodes/resolve方法测试在刚才起的新服务节点5001端口(端口号因人而异)，调用/chain方法： 123456789101112131415$ curl -X GET "http://localhost:5001/chain"#返回&#123; "chain": [ &#123; "index": 1, "previous_hash": "1", "proof": 100, "timestamp": 1558874708.5040278, "transactions": [] &#125; ], "length": 1&#125; 可以看到，还是空的，只有1个区块。 这时调用/nodes/resolve方法与登记好节点的区块链进行同步拉取。 例如，5000端口现在的区块链如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344$ curl -X GET "http://localhost:5000/chain"&#123; "chain": [ &#123; "index": 1, "previous_hash": "1", "proof": 100, "timestamp": 1558874710.4303942, "transactions": [] &#125;, &#123; "index": 2, "previous_hash": "43417cdaeda03ca51a0959828b681e52a95c0ea77f8544114b1b9f4358dd3bbc", "proof": 5363, "timestamp": 1558874791.834334, "transactions": [ &#123; "amount": 1, "recipient": "2adafd5dd2184a989289f38a02d35a9e", "sender": "0" &#125; ] &#125;, &#123; "index": 3, "previous_hash": "c22e009dd1d09a08b681013b5c0bd8c9f7e798483186562c9ab7f98370c035f2", "proof": 31893, "timestamp": 1558875113.180196, "transactions": [ &#123; "amount": 1, "recipient": "bob", "sender": "alice" &#125;, &#123; "amount": 1, "recipient": "2adafd5dd2184a989289f38a02d35a9e", "sender": "0" &#125; ] &#125; ], "length": 3&#125; 现在调用5001端口的/nodes/resolve方法进行同步： 1234567891011121314151617181920212223242526272829303132333435363738394041424344$ curl -X GET "http://0.0.0.0:5001/nodes/resolve"&#123; "message": "Our chain was replaced", "new_chain": [ &#123; "index": 1, "previous_hash": "1", "proof": 100, "timestamp": 1558874710.4303942, "transactions": [] &#125;, &#123; "index": 2, "previous_hash": "43417cdaeda03ca51a0959828b681e52a95c0ea77f8544114b1b9f4358dd3bbc", "proof": 5363, "timestamp": 1558874791.834334, "transactions": [ &#123; "amount": 1, "recipient": "2adafd5dd2184a989289f38a02d35a9e", "sender": "0" &#125; ] &#125;, &#123; "index": 3, "previous_hash": "c22e009dd1d09a08b681013b5c0bd8c9f7e798483186562c9ab7f98370c035f2", "proof": 31893, "timestamp": 1558875113.180196, "transactions": [ &#123; "amount": 1, "recipient": "bob", "sender": "alice" &#125;, &#123; "amount": 1, "recipient": "2adafd5dd2184a989289f38a02d35a9e", "sender": "0" &#125; ] &#125; ]&#125; 可以看到，5001端的区块链已经完全和5000端的同步了。 4. 处理区块链分叉此时，5000和5001两个节点的区块链都是完全一致的。若在5000端和5001端同时进行一次交易，那么会出现什么结果呢？两个节点的链长是一样的，最后是谁同步谁的？ 1234567891011121314151617# 在5000端，alice给bob发10块$ curl -X POST -H "Content-Type: application/json" -d '&#123; "sender": "alice", "recipient": "bob", "amount": 10&#125;' "http://localhost:5000/transactions/new"# 在5001端，bob给alice发10块$ curl -X POST -H "Content-Type: application/json" -d '&#123; "sender": "bob", "recipient": "alice", "amount": 10&#125;' "http://localhost:5001/transactions/new"# 在两个节点，都生成一个区块$ curl -X GET "http://0.0.0.0:5000/mine"$ curl -X GET "http://0.0.0.0:5001/mine" 此时，在5000端调用/nodes/resolve方法将不会和5001端的同步，反之也是。 当两个节点之中，有一个节点先于另一个节点出块，那么另一个节点将会遵从先出快节点的区块链。Have a try :) 5. 修改哈希碰撞难度修改哈希碰撞难度，可有效降低出块的时间。 在blockchain.py文件 178行： 12345678910111213141516def valid_proof(last_proof, proof, last_hash): """ Validates the Proof :param last_proof: &lt;int&gt; Previous Proof :param proof: &lt;int&gt; Current Proof :param last_hash: &lt;str&gt; The hash of the Previous Block :return: &lt;bool&gt; True if correct, False if not. """ guess = f'&#123;last_proof&#125;&#123;proof&#125;&#123;last_hash&#125;'.encode() guess_hash = hashlib.sha256(guess).hexdigest() # 在这里修改，0的个数要与数字一致 # 数字越大，0越多，哈希碰撞难度越大 return guess_hash[:4] == "0000"]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GoDaddy+GitHub Pages 构建一个属于自己的博客平台]]></title>
    <url>%2F2019%2F05%2F20%2Fhow-i-build-this-website%2F</url>
    <content type="text"><![CDATA[关于博客学习技术总是无底洞，越往深处挖掘，越有挑战也越有乐趣。之前就很想要有个属于自己域名，自己的博客，可以在自己的博客里分享自己学到的、感受的，这也是在这世上孤独的自己的一种乐趣。如今将想法做成现实，希望能多多commit :) GitHub Pages首先当然是要在Github创建一个repository, 用于存放自己的blog文件. 申请好之后在仓库Settings处往下拉, 到GitHub Pages栏中 选择master branch刷新后, 就会在username.github.io自动生成一个网站, GitHub Pages就已经生成了, 之后我们在GoDaddy里申请好了域名, 再把新域名填入Custom domain就好了. GoDaddy域名申请在网上的一些GoDaddy申请配置教程稍微有点过时了, 所以在这也说说如何配置. 选择GoDaddy的原因其实狗爹这里的域名价格并不是最实惠的, 国内的万网之类的也是可以, 但是使用国内域名可能存在备案之类的,感觉麻烦的, 于是.. (申请的时候搜索一下GoDaddy优惠券会有不小的优惠) 申请 查询自己喜欢的域名是否已经被占用, 选好之后添加到购物车. 进入购物车前会推荐你使用它们的隐私服务, No Thanks 就好了. 可使用支付宝, 但不知为啥我这一直用不了支付宝支付, 自动被拒绝了, 所以使用了银联. 第一年只需要14块钱, 也算是很优惠了:) 一般来说 .com .live之类的域名还算便宜, *.cn的比较贵. DNS更换狗爹这里的DNS不太稳定, 所以建议使用DNSPod进行域名解析. 首先在刚刚购买的域名这进行DNS更换选择自定义的dns服务器, 填入以下地址: 12f1g1ns1.dnspod.netf1g1ns2.dnspod.net 在DNSPod注册完成后, 在控制台域名解析中添加域名 添加主机记录, 用于解析. 其中ip地址是你申请的GitHub Pages的ip地址, 如果不知道ip的话就ping一下就行了. 完成了之后, 需要一些时间来让DNS迭代, 一般一两个小时以内就行了. 在GitHub Pages使用自己的域名在Github中创建的仓库设置中Custom domain填入新域名就好了, 建议强制使用HTTPS. 有可能存在一时半会无法解析新域名的情况, 这是DNS还没迭代好, 等一会就好了. Hexo使用Hexo是一种简单快捷又强大的博客构建工具，可参照Hexo官方文档进行搭建。 依赖 Node.js，version &gt;= 6.9 Git 安装与使用Hexo在全局安装hexo-cli 1npm install -g hexo-cli 安装成功之后在合适的位置创建Blog文件夹, 用于存放Bolg资源. 12mkdir myBlog &amp;&amp; cd myBlog #名字自拟hexo init # hexo 初始化 初始化完成, 自动构建了一个简易Hexo包, 结构如下: 123456789$ tree -L 1.├── _config.yml #配置文件├── node_modules #模块文件夹├── package-lock.json├── package.json #所需模块配置信息├── scaffolds├── source #源码, 资源所在包└── themes #使用的主题包 运行以下命令, 根据你的_config.yml配置, 以及source中的资源自动生成静态文件. 123hexo generate# 以下缩减方式也可hexo g 该命令在文件夹下自动生成了public文件夹, 之后是该文件夹deploy到远程网站(Github)中. 可在本地调试, 查看效果, 默认使用端口4000: 123456hexo server# 以下缩减方式也可hexo s# 终端输出INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 在Blog发布一篇新文章”My First Post”: 1hexo new "My First Post" 随即在 source/_post 文件夹创建一个My-First-Post.md的Markdown文件, 在上面自由创作就猴啦. _config.yml配置在这个yml文件中可以配置大部分Blog应有的设置信息, 看懂英文就行, 这里不多赘述. 但是有几个需要提及的. 1vim _config.yml 在最底下的一部分来配置远端Deploy, 在这里建议使用新的分支, 最后再merge到master分支. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/username/repo branch: hexo-dev 完成之后在本地调试hexo g &amp;&amp; hexo s后, 即可deploy到Github pages了: 123hexo deploy# 以下缩减也可以hexo d 其余配置详情可以看官方文档的配置(链接) 使用ThemeHexo默认使用的主题是landscape, 还有许多有趣的主题可以使用. 本博客使用的主题是NexT, 如何配置详情就请查看链接内写的吧. 有其他功能部件使用, 就放以后再更吧 &lt;_&lt; 参考链接 Documentation | Hexo Node.js GoDaddy DNSPod NexT]]></content>
      <categories>
        <category>博客搭建</category>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A lightweight attribute-based encryption scheme for the Internet of Things]]></title>
    <url>%2F2019%2F05%2F16%2FA-lightweight-attribute-based-encryption-scheme-for-the-Internet-of-Things%2F</url>
    <content type="text"><![CDATA[论文阅读：A lightweight attribute-based encryption scheme for the Internet of Things文如其名, 比较lightweight, 才9页(笑.由北京科技大学的博士与中科院博士联手出品. ABSTRACT In this paper, a lightweight no-pairing ABE scheme based on elliptic curve cryptography (ECC) is proposed to address the security and privacy issues in IoT. The security of the proposed scheme is based on the ECDH assumption instead of bilinear Diffie–Hellman assumption, and is proved in the attribute based selective-set model. By uniformly determining the criteria and defining the metrics for measuring the communication overhead and computational overhead, the cMomparison analyses with the existing ABE schemes are made in detail. The results show that the proposed scheme has improved execution efficiency and low communication costs. In addition, the limitations and the improving directions of it are also discussed in detail. We propose a no-pairing ECC-Based ABE scheme to deal with the data security and privacy issues in IoT. Since it replaces the expensive bilinear pairing operation with point scalar multiplication on elliptic curve, it can meet the lightweight requirement and is suitable for IoT. 本文提出了个适用于IoT的ABE解决方案, 因为双线性配对型的ABE很复杂,代价很高,所以采用基于ECC的方法.同时, 在安全方面采用基于ECDH假设来取代二线Diffie-Hellman假设. 用在椭圆曲线上的点标量乘法代替代价高的双线性配对,可以减少计算开销和通信开销,更适用于IoT设备. ps:Diffie-Hellman密钥交换(csdn和知乎) 预备知识1.ECC基础ECC首先是个公钥加密的算法,生成一对公私钥,私钥用来加密,公钥进行解密与验证. 私钥是一个数字(非常大),通常是随机选出来的. 通过椭圆曲线乘法生成一个公钥. 比特币是在公钥的基础上继续进行哈希函数生成比特币地址. 私钥为了生成私钥,需要挑选一个足够安全的熵源以保证随机性.从编程的角度来看,一般是通过在一个密码学安全的随机源中去除一长串随机字节,对其进行SHA256哈希算法进行运算,就可以产生一个256位二进制数,一般是以16进制表示. 有如下随机生成的秘药,以十六进制格式表示: 11E99423A4ED27608A15A2616A2B0E9E52CED330AC530EDCC32C8FFC6A526AEDD 比特币私钥空间大小是2^256,用十进制表示的话,大约是10^77. 目前可见宇宙被估计只含有10^80个原子. 公钥公钥K是通过使用私钥k进行椭圆曲线乘法运算得到公钥,这个过程不可逆: K=k*G,其中G是生成点的常数点. 逆向求私钥及其困难,只能暴力破解. 椭圆曲线密码学解释比特币使用的是secp256k1标准的特殊椭圆曲线. 由下述函数定义: 1y^2=(x^3 + 7) over (Fp) or y^2 mod p=(x^3 + 7) mod p 上述mod p(素数p取模)表明该曲线实在素数阶p的有限域内, 也写作Fp, 其中: p = 2^256 – 2^32 – 2^9 – 2^8 – 2^7 – 2^6 – 2^4 – 1, 这是⼀个⾮常⼤的素数. 上面的素数阶和有限域让我看得头疼,是啥? 带着问题,来到这个博客认真补习了一下离散数学的知识.这个博客学习ECC的原理. 椭圆曲线普通方程 : $\large y^2+a_1xy+a_3y=x^3+a_2x^2+a_4x+a_6$ &lt;/br&gt;无穷远点(0,Y,0) 平常点(x,y)斜率k: $\Large k=-\frac{F_x(x,y)}{F_y(x,y)}=\frac{3x^2+2a_2x+a_4-a_1y}{2y+a_1x+a_3}$ 椭圆曲线Abel群 : 在椭圆曲线定义了交换群(Abel群) 任意取椭圆曲线上两点P、Q（若P、Q两点重合，则作P点的切线），作直线交于椭圆曲线的另一点R’，过R’做y轴的平行线交于R，定义P+Q=R。这样，加法的和也在椭圆曲线上，并同样具备加法的交换律、结合律. 有限域椭圆曲线 : 因为椭圆曲线是连续的,需要将曲线上的点变成离散的点.把椭圆曲线定义在有限域上.所以椭圆曲线是模p的有限域,记作GF(p)或Fp. 可表示为(P,+,*),其中p是一个质数,P集合表示{0,1,..,p-1}.其中加运算和乘运算都是模运算.详情可以看这个博客,在这不展开. 椭圆曲线在有限域就表示为 Ep(a,b) ,p是质数, x,y∈[0,p-1] $\large y^2=x^3+ax+b\pmod p$ 选择两个满足下列条件的小于p的非负整数a,b $\large 4a^3+27b^2\ne0\pmod p$ Fp上的椭圆曲线同样有加法 无穷远点O∞是零元, 有O∞+ O∞= O∞，O∞+P=P P(x,y)的逆元是 (x,-y mod p)= (x,p-y) ，有P+(-P)= O∞ P(x1,y1),Q(x2,y2)的和R(x3,y3) 有如下关系： $x_3\equiv k^2-x_1-x_2\pmod p$ $y_3\equiv k(x_1-x_3)-y_1\pmod p$ 若P=Q, 则 $k=(3x_2+a)/2y_1\pmod p$ 若P≠Q, 则 $k=(y_2-y_1)/(x_2-y_1)\pmod p$ 举例 :椭圆曲线已知E_23(1,1)上两点P(3,10)，Q(9,7)，求(1)-P，(2)P+Q，(3) 2P 椭圆曲线加密 : 考虑K=kG ，其中K、G为椭圆曲线Ep(a,b)上的点，n为G的阶（nG=O∞），k为小于n的整数。则给定k和G，根据加法法则，计算K很容易但反过来，给定K和G，求k就非常困难。因为实际使用中的ECC原则上把p取得相当大，n也相当大，要把n个解点逐一算出来列成上表是不可能的。这就是椭圆曲线加密算法的数学依据. 点G称为基点（base point） k（kn）为私有密钥（privte key） K为公开密钥（public key) ECC保密通信算法 : Alice选定一条椭圆曲线E，并取椭圆曲线上一点作为基点G 假设选定E29(4,20)，基点G(13,23) , 基点G的阶数n=37 Alice选择一个私有密钥k，并生成公开密钥K=kG 比如25, K= kG = 25G = (14,6） Alice将E和点K、G传给Bob Bob收到信息后，将待传输的明文编码到上的一点M（编码方法略），并产生一个随机整数r（r小于n,n为G的阶数） 假设r=6 要加密的信息为3,因为M也要在E29(4,20) 所以M=(3,28) Bob计算点C1=M+rK和C2=rG C1= M+6K= M+625G=M+2G=(3,28)+(27,27)=(6,12) C2=6G=(5,7) Bob将C1、C2传给Alice Alice收到信息后，计算C1-kC2，结果就应该是点M C1-kC2 =(6,12)-25C2 =(6,12)-25*6G =(6,12)-2G =(6,12)-(27,27) =(6,12)+(27,2) =(3,28) 数学原来上能解密是因为:C1-kC2=M+rK-krG=M+rkG-krG=M 论文对ECC进行了剖析. ECC can provide security based on the known public key cryp-tography primitives, which are Elliptic Curve Digital Signature Al-gorithm (ECDSA), key exchange/agreement (ECDH, Elliptic Curve Diffie–Hellman) and Elliptic Curve Integrated Encryption Standard (ECIES). Compared with other public key cryptography schemes, ECC has 3 distinguished features, which make it very fit for resources-constrained environments [22]. It only requires significantly smaller key size than RSA and the modular exponent based public key schemes on the same level of security. Its point scalar multiplication operation is much faster than modular exponent operation and bilinear mapping operation. It is easy to be implemented in hardware. In this paper, we take these advantages of ECC and the features of ABE to construct an ABE scheme for IoT, where Elliptic Curve Decisional Diffie–Hellman Problem (ECDDHP) serves as the complexity assumption, and the Elliptic Curve Integrated Encryption Standard (ECIES) is adopted to encrypt the data. ECC提供的安全性基于ECDSA,ECDH,ECIES.与其他的公钥加密算法,ECC有如下几个非常适用于资源节约型的环境的特性. 相对于RSA,可以用较小量级的密钥大小提供与RSA相同等级的安全性. 标量乘法运算比模指数运算和双线性映射快得多. 在硬件上更容易实现. 本文基于这些ECC的功能,来构建在IoT上的ABE方案. ECDDH 来作复杂度假设, ECIES 对数据加密. ECDDH_ECDH_ 是一种在椭圆曲线上的Diffie-Hellman的密钥交换协议.可以帮助具有椭圆曲线公私钥对的双方通过不安全的通道生成 共享密钥.这个共享密钥可以直接当成密钥或者派生出新的密钥来加密接下来通讯内容. 例如, Alice与Bob使用同一套ECC系统(q,a,b,G,p) Alice的密钥对是(S_A , P_A=S_A*G). Bob的密钥对(S_B , P_B=S_B*G) 那么他们的共享密码K_{A,B}就是: K_{A,B}=S_A* P_B=S_B* P_A=S_A* S_B* G ECDDH(elliptic curve decisional Diffie–Hellman problem) 是ECDH的重要变体. 对于具有生成元G的q阶椭圆曲线群G_E, DHH表明, 给定c*G和d*G的条件下,c*d*G是G_E中的随机元素.(其中,c,d都是在q阶整数上随机取的.) 也就是说，对于给定的三元组（c·G，d·G，c·d·G）和（c·G，d·G，Z），无法判断Z = c·d·G ECIESECIES椭圆曲线集成加密方案,包含有密钥交换和公钥加密的部分. 使用ECDH生成共享密钥,数据的机密性由对称加密算法保证,密钥和数据完整性由MAC密钥的功能保证. 以下是ECIES的加密与解密步骤: Access structure访问结构用于描述访问策略,可用访问树表示,由如下定义: (Access Structure [11]). Let $\{A_1, A_2,…, A_n\}$ be a set of attributes. A collection $\mathbb{A}$ = $2^\{A_1,A_2,…,A_n\}$ is monotone, for $\forall B,C$: if $B\in \mathbb{A}$ and $B\subseteq C$, then $C ∈ \mathbb{A}$. An access structure (respectively, monotone) is a collection (respectively, monotone) $\mathbb{A}$ of non-empty subsets of $\{A_1,A_2,..,A_n\}$, i.e.,$\mathbb{A}⊆$$2^{A_1,A_2,..,A_n}\setminus \emptyset$. The sets in A are called the authorized attributes sets, and the sets not in A are called the unauthorized attributes sets. 有那么一组属性组 $\{A_1, A_2,…, A_n\}$, 设有一二元集合 $\mathbb{A}$ = $2^\{A_1,A_2,…,A_n\}$,如果对与任意的B与C,有B属于A,且B是C的子集,得到 C也属于A.那么二元集合A是单调的. 所以访问结构是属性集合 $\{A_1, A_2,…, A_n\}$ 的非空子集 $\mathbb{A}$ ,集合 $\mathbb{A}$ 称为授权集. 访问树 的具体定义与原理 在这篇文章有详细提及, 在这不详细说. 算法实现细节该算法是用KP-ABE的结构, 涵括了AA(attribute authority). 由四个算法步骤组成: Setup: 在中心节点生成public key parameters,PK和master key,MK. master key作为私钥在中心节点所用,public key parameters向外公开. Encrypt: 由发送者执行,将消息M输入,中心节点的PK加密输入(确定中心节点),设定属性集r,输出密文CM. key-Generation:由中心节点执行,将访问结构R和中心节点MK输入,根据R输出解密钥匙D. Decrypt: 由接收者执行,输入发送者发送的密文CM,中心节点给的解密钥匙D,中心节点的PK,当R(r)=1时,可以得出解密后的消息M. 本文的给出的KP-ABE算法本文所给出的轻量级的ABE是基于ECC的,假定ECC的参数是(q,a,b,G,p). 对于属性集w, 密钥是由基于拉格朗日插值法的secret sharing构建的. 且该方法有一个ECC-based的密钥生成中心.（拉格朗日插值法学习链接） Setup:首先是定义中心节点的属性集U,对U中每个属性$i$, 在ECC的q阶正整数群内随机找一个对应的数字 $s_i$,每个属性$i$的公钥就是$P_i=s_i\cdot G$. 同样地,在q阶正整数群内随机找一个数字$s$作为中心节点的MK,中心节点的PK就等于 $PK=s \cdot G$, 所以中心节点的公开参数可以表示为: $Params=\{ PK,P_1,..,P_\left | U \right|\}$ Encryption(M,w,Params): 与现存的ABE不同的是, 消息M是由ECIES加密的,而不是模指数运算或者双线性配对加密的. 随机从ECC的q阶正整数群选择k来计算C’,$C’=k \cdot PK=(K_x,K_y)$,若C’为0则重选k. 分别对Params中$P_i$计算$C_i$, $C_i=k \cdot P_i, i \in w$. $K_x$为加密密钥,$K_y$则是整合的密钥. $C=ENC(M,K_x)$, $MAC_M=HMAC(M,K_y)$ 密文cipher-text就可以表示为$CM=(w,C,MAC_M,C_i,i\in w)$. KeyGeneration($\Gamma,MK$): 当且仅当 $\Gamma (w)=1$时,通过算法生成解密的密钥. 对访问控制树 $\Gamma$上的每个节点u都自上而下进行定义,这些节点的门限都是$d_u$. 多项式$q_u(x)$由此定义 对于访问树 $\Gamma$的根R,设$q_R(0)=s$ (ps: s就是setup步骤的MK) 并随机选择$d_R-1$个其他点做多项式$q_R(x)$ 对于其他节点u, $q_u(0)=q_{parent(u)}(index(u))$,也要随机选择$d_u-1$个其他点来定义$q_u(x)$ 当访问树的叶子节点都被定义了之后,叶子节点u的secret share解密密钥就可以表示为:$\large D_u=q_u(0)/s_i$,其中$i$是一个属性,$s_i$在setup步骤上就已经定义,$s_i^-1$是$s_i$在ECC群中的逆元.根据这样的访问树结构就能逐步还原. 最终解密密钥可以表示为:$D=(D_u=q_u(0)/s_i, i=attr(u)\ and\ \ i\in w)$. Decryption(CM,D,Params):与其他算法相似,在访问树里的节点的解密算法用递归的方法实现. 对每个叶子节点u, 令 $i=attr(u)$ 有:$ DecryptNode(CM,D,u)=$\begin{cases}D_u \cdot C_i=q_u(0) \cdot s_i^-1\cdot k\cdot P_i\\=q_u(0) \cdot s_i^-1\cdot k\cdot s_i\cdot G\\=q_u(0) \cdot k\cdot G , &amp;(i\in w)\\\perp , &amp;Otherwise.\end{cases} 对非叶子节点,可以对每个子节点v调用$DecryptNode(CM,D,v)$. 令$w_u$为u的$d_u$个子节点的集合, 对每一个$w_u$的元素v进行$DecryptNode(CM,D,v)$. 若存在$w_u$,那么有: 对根节点有:$DecryptNode(CM, D, R) = q_R(0)·k·G = s·k·G = (K′_x, K′_y)$.其中$K’_x$就是消息M的解密密钥,$K’_y$是消息M的集合密钥.$M’=DEC(C,K’_X)$. 如果$HMAC(M’,K’_y)=MAC_M$,那么就表示消息M已经被正确解密. 所以说所有的正确性,完整性都由$MAC_M$验证. 算法表现与分析本文为了评估所提出的ABE方案的轻量级的特点,在 _通信开销_ 和 KP-ABE和CP-ABE的 _加算开销_ 上分析.并给出该算法的限制. 通信开销指标通信开销取决于所传输的消息的长度. 传输的消息包括了 密文cipher-text ,公钥 和 私钥. 现有大多数ABE方案都是基于双线性配对的RSA-based方案.有两个群$G_1,G_2$, $G_1$是一个大素数阶的双线性群,双线性映射可以表示为 $G_1 \times G_1 \rightarrow G_2$. 且$G_1,G_2$ 的基本运算都是模指数运算.在相同安全级别上,RSA的密钥对比ECC的密钥对长得多.RSA的密钥对长度在 $G_1$ 是ECC的3.2倍,$G_2$ 是6.4倍. 在ABE方案中,密文需要包含属性集, 密文的长度与属性集成线性增长. 密文 $CM=(w,C,MAC_M,C_i,i\in w)$ ,$C_i$是椭圆曲线的一点,且长度为$2l$,由于先前的假设,消息M和MAC的长度都为安全级别$l$,所以$C$和$MAC_M$也是$l$位长. 所以给出的方案的密文长度是 $(l+l+k*2l)=(2k+2)l$. 另外,公钥是 $\{PK,P_i,i\in U\}$,每一个元素都是椭圆曲线上的一点,所以公钥长度为 $(2l+n*2l)=(2n+2)l$.私钥是 $\{D_u=q_u(0)/s_i,\ i=attr(u)\mbox{ and }i\in w\}$, 长度是$k\cdot l$. 计算开销指标本文对比了现有的CP-ABE和KP-ABE. 计算开销一般是由双线性映射(公钥的加密解密操作)的成本衡量的.本方案中没涉及,所以不计算.本文的加密算法包括了(1+k)点标量乘法,且解密的递归过程不超过(2k-1)点标量乘法,所以总的最多有3k个点标量乘法. 与其他的方案的比较如下图: 可以看出在 公私钥长度 都远比其他方案要短, 密文长度 在属性大于10个时大于常数级的方案.计算开销 也明显小于一般方案. 所以说在 轻量级 的属性加密方案上,该文的方案是很优秀的. 提出的ABE方案的限制 撤销属性灵活性较差: 使用的是单调访问结构和秘密共享机制,都是在”AND”和”OR”门上进行的,不支持”NOT”门, 难以表达复杂的访问策略,属性撤销也很麻烦.通常操作都是重新加密来实现属性撤销. 本文并没有讨论属性撤销属性. 可扩展性差: 通信开销和计算开销都与加密属性数量成线性关系. 通用性较差: 本方案是单一权限上的应用,不适用于多权限结构. 参考文章 Yao X, Tian Y, Tian Y. A lightweight attribute-based encryption scheme for the Internet of Things[J]. Future Generation Computer Systems, 2015, 49(C):104-112. Bitcoin加密技术之椭圆曲线密码学 谈谈有限域那些事儿 离散对数和椭圆曲线加密原理 ECC入门+实例 (身份证比特币加密算法) 数学、英语对程序员来说重要吗？记线性秘密分享方案（Linear Secret Sharing Scheme，LSSS）的实现 如何直观地理解拉格朗日插值法？ @马同学的回答 密码学中的离散数学知识学习]]></content>
      <categories>
        <category>论文研究</category>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>ECC</tag>
        <tag>属性加密</tag>
      </tags>
  </entry>
</search>
